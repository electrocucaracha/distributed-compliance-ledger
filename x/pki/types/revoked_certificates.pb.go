// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/revoked_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RevokedCertificates struct {
	Subject          string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId     string `protobuf:"bytes,2,opt,name=subject_key_id,json=subjectKeyId,proto3" json:"subject_key_id,omitempty"`
	PemCert          string `protobuf:"bytes,3,opt,name=pem_cert,json=pemCert,proto3" json:"pem_cert,omitempty"`
	SerialNumber     string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Issuer           string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorityKeyId   string `protobuf:"bytes,6,opt,name=authority_key_id,json=authorityKeyId,proto3" json:"authority_key_id,omitempty"`
	RootSubject      string `protobuf:"bytes,7,opt,name=root_subject,json=rootSubject,proto3" json:"root_subject,omitempty"`
	RootSubjectKeyId string `protobuf:"bytes,8,opt,name=root_subject_key_id,json=rootSubjectKeyId,proto3" json:"root_subject_key_id,omitempty"`
	IsRoot           bool   `protobuf:"varint,9,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	Owner            string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *RevokedCertificates) Reset()         { *m = RevokedCertificates{} }
func (m *RevokedCertificates) String() string { return proto.CompactTextString(m) }
func (*RevokedCertificates) ProtoMessage()    {}
func (*RevokedCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_cca42ddac598ffcf, []int{0}
}
func (m *RevokedCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokedCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokedCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokedCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokedCertificates.Merge(m, src)
}
func (m *RevokedCertificates) XXX_Size() int {
	return m.Size()
}
func (m *RevokedCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokedCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_RevokedCertificates proto.InternalMessageInfo

func (m *RevokedCertificates) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *RevokedCertificates) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *RevokedCertificates) GetPemCert() string {
	if m != nil {
		return m.PemCert
	}
	return ""
}

func (m *RevokedCertificates) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *RevokedCertificates) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *RevokedCertificates) GetAuthorityKeyId() string {
	if m != nil {
		return m.AuthorityKeyId
	}
	return ""
}

func (m *RevokedCertificates) GetRootSubject() string {
	if m != nil {
		return m.RootSubject
	}
	return ""
}

func (m *RevokedCertificates) GetRootSubjectKeyId() string {
	if m != nil {
		return m.RootSubjectKeyId
	}
	return ""
}

func (m *RevokedCertificates) GetIsRoot() bool {
	if m != nil {
		return m.IsRoot
	}
	return false
}

func (m *RevokedCertificates) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*RevokedCertificates)(nil), "zigbeealliance.distributedcomplianceledger.pki.RevokedCertificates")
}

func init() { proto.RegisterFile("pki/revoked_certificates.proto", fileDescriptor_cca42ddac598ffcf) }

var fileDescriptor_cca42ddac598ffcf = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x9b, 0x42, 0x6f, 0xa6, 0x54, 0x95, 0x8b, 0xc0, 0x2c, 0x51, 0xb9, 0x0c, 0x5d, 0x92,
	0x0c, 0xbc, 0x01, 0xb0, 0x20, 0x24, 0x86, 0xb2, 0x31, 0x10, 0xe5, 0x72, 0x68, 0x4d, 0x92, 0xda,
	0xb2, 0x1d, 0x20, 0x3c, 0x05, 0x8f, 0xc5, 0xd8, 0xb1, 0x23, 0x6a, 0x5f, 0x04, 0xc5, 0x4e, 0x20,
	0x9b, 0xcf, 0xef, 0xff, 0xfc, 0xe7, 0x1c, 0x7d, 0xc8, 0xe6, 0x09, 0xf5, 0x04, 0xbc, 0xb1, 0x04,
	0x62, 0x3f, 0x02, 0xa1, 0xe8, 0x0b, 0x8d, 0x02, 0x05, 0xd2, 0xe5, 0x82, 0x29, 0x86, 0xdd, 0x4f,
	0xba, 0x08, 0x01, 0x82, 0x34, 0xa5, 0xc1, 0x2a, 0x02, 0x37, 0xa6, 0x52, 0x09, 0x1a, 0xe6, 0x0a,
	0xe2, 0x88, 0x65, 0xdc, 0xa8, 0x29, 0xc4, 0x0b, 0x10, 0x2e, 0x4f, 0xe8, 0xf9, 0xa6, 0x8d, 0x26,
	0x73, 0x13, 0x77, 0xd3, 0x48, 0xc3, 0x04, 0xf5, 0x64, 0x1e, 0xbe, 0x42, 0xa4, 0x88, 0x35, 0xb5,
	0x66, 0x83, 0x79, 0x5d, 0xe2, 0x4b, 0x34, 0xaa, 0x9e, 0x7e, 0x02, 0x85, 0x4f, 0x63, 0xd2, 0xd6,
	0x86, 0x61, 0xa5, 0xde, 0x43, 0x71, 0x17, 0xe3, 0x53, 0xd4, 0xe7, 0x90, 0xe9, 0x0d, 0xc9, 0x9e,
	0x09, 0xe0, 0x90, 0x95, 0x23, 0xf0, 0x05, 0x3a, 0x94, 0x20, 0x68, 0x90, 0xfa, 0xab, 0x3c, 0x0b,
	0x41, 0x90, 0xfd, 0xaa, 0x5f, 0x8b, 0x0f, 0x5a, 0xc3, 0xc7, 0xa8, 0x4b, 0xa5, 0xcc, 0x41, 0x90,
	0x8e, 0xfe, 0xad, 0x2a, 0x3c, 0x43, 0xe3, 0x20, 0x57, 0x4b, 0x26, 0xa8, 0x2a, 0xea, 0xf9, 0x5d,
	0xed, 0x18, 0xfd, 0xe9, 0x66, 0x83, 0x33, 0x34, 0x14, 0x8c, 0x29, 0xbf, 0x3e, 0xa3, 0xa7, 0x5d,
	0x07, 0xa5, 0xf6, 0x58, 0x9d, 0xe2, 0xa0, 0x49, 0xd3, 0x52, 0xe7, 0xf5, 0xb5, 0x73, 0xdc, 0x70,
	0x9a, 0xc4, 0x13, 0xd4, 0xa3, 0xd2, 0x2f, 0x65, 0x32, 0x98, 0x5a, 0xb3, 0x7e, 0xb9, 0xd4, 0x9c,
	0x31, 0x85, 0x8f, 0x50, 0x87, 0xbd, 0xaf, 0x40, 0x10, 0xa4, 0x3b, 0x4d, 0x71, 0xfd, 0xfc, 0xbd,
	0xb5, 0xad, 0xf5, 0xd6, 0xb6, 0x7e, 0xb6, 0xb6, 0xf5, 0xb5, 0xb3, 0x5b, 0xeb, 0x9d, 0xdd, 0xda,
	0xec, 0xec, 0xd6, 0xd3, 0xed, 0x82, 0xaa, 0x65, 0x1e, 0xba, 0x11, 0xcb, 0x3c, 0xc3, 0xcb, 0xa9,
	0x81, 0x79, 0x0d, 0x60, 0xce, 0x3f, 0x31, 0xc7, 0x20, 0xf3, 0x3e, 0xbc, 0x92, 0xbf, 0x2a, 0x38,
	0xc8, 0xb0, 0xab, 0x89, 0x5f, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x19, 0x47, 0xb2, 0x63, 0x13,
	0x02, 0x00, 0x00,
}

func (m *RevokedCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokedCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokedCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsRoot {
		i--
		if m.IsRoot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.RootSubjectKeyId) > 0 {
		i -= len(m.RootSubjectKeyId)
		copy(dAtA[i:], m.RootSubjectKeyId)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.RootSubjectKeyId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RootSubject) > 0 {
		i -= len(m.RootSubject)
		copy(dAtA[i:], m.RootSubject)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.RootSubject)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AuthorityKeyId) > 0 {
		i -= len(m.AuthorityKeyId)
		copy(dAtA[i:], m.AuthorityKeyId)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.AuthorityKeyId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PemCert) > 0 {
		i -= len(m.PemCert)
		copy(dAtA[i:], m.PemCert)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.PemCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintRevokedCertificates(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRevokedCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovRevokedCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RevokedCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.PemCert)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.AuthorityKeyId)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.RootSubject)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	l = len(m.RootSubjectKeyId)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	if m.IsRoot {
		n += 2
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovRevokedCertificates(uint64(l))
	}
	return n
}

func sovRevokedCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRevokedCertificates(x uint64) (n int) {
	return sovRevokedCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RevokedCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRevokedCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokedCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokedCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PemCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PemCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootSubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootSubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRoot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRoot = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRevokedCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRevokedCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRevokedCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRevokedCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRevokedCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRevokedCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRevokedCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRevokedCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRevokedCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRevokedCertificates = fmt.Errorf("proto: unexpected end of group")
)
